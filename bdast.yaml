---
version: "2alpha"

vars:
  github_owner: archmachina
  github_repo: bdast

steps:

  clean_dist:
    command:
      cmd: rm -rf dist/

  clean_env:
    command:
      cmd: rm -rf env/

  clean:
    depends_on:
      - clean_dist
      - clean_env

  version:
    block:
      steps:
        - desc: Extract git sha from repo
          bash:
            cmd: git log -1 --format=%h
            capture: git_sha
            capture_strip: true

        - desc: Use git sha for semver version (default)
          vars:
            set:
              semver_source: "0.1.0-rolling+{{ git_sha }}"
          when:
            - "semver_source|default('') == ''"

        - desc: Parse semver source
          semver:
            required: true
            sources:
              - "{{ semver_source }}"
            store: version

  python_build:
    block:
      steps:
        - desc: Set up python environment
          bash:
            cmd: >
              python3 -m venv env &&
              source ./env/bin/activate &&
              python3 -m pip install --upgrade pip &&
              python3 -m pip install --upgrade setuptools build twine ;
              python3 -m pip install -r requirements.txt

        - desc: Perform python build
          bash:
            cmd: source ./env/bin/activate && python3 -m build
            env:
              # BUILD_VERSION is referenced in setup.py
              BUILD_VERSION: "{{ version.major }}.{{ version.minor }}.{{ version.patch }}"
    after:
      - clean
    depends_on:
      - clean_dist
      - version

  pypi_release:
    depends_on:
      - clean
      - python_build
    bash:
      cmd: source ./env/bin/activate && python3 -m twine upload dist/*
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: "{{ env.SECRET_PYPI_TOKEN }}"

  test_run:
    depends_on:
      - python_build
    bash:
      cmd: dfbar -f src/tests/Dockerfile src

  github_release:
    url:
      method: POST
      url: "https://api.github.com/repos/{{ github_owner }}/{{ github_repo }}/releases"
      headers:
        "Accept": "application/vnd.github.v3+json"
        "Authorization": "token {{ env.SECRET_GITHUB_TOKEN }}"
        "Content-Type": "application/json"
        "X-GitHub-Api-Version": "2022-11-28"
      body: |
        {
          "tag_name": "{{ version.post_discard }}",
          "name": "Version {{ version.full }}",
          "draft": false,
          "prerelease": {{ 'true' if version.is_prerelease else 'false' }},
          "generate_release_notes": true
        }

actions:
  clean:
    steps:
      - clean

  test:
    steps:
      - test_run

  # Standard build
  build:
    steps:
      - python_build

  # Steps for a pull request to the main branch
  pr_branch_main:
    steps:
      - test_run

  # Steps to perform when building on main branch
  push_branch_main:
    steps:
      - test_run

  # Steps to perform when building from a git tag v*
  push_tag_v:
    steps:
      - desc: Capture semver information from GITHUB_REF
        vars:
          set:
            semver_source: "{{ env.GITHUB_REF }}"
      - python_build
      - pypi_release
      - github_release

