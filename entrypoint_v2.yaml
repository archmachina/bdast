---
version: "2alpha"

vars:
  github_owner: archmachina
  github_repo: bdast

steps:
  ########
  # Versioning steps
  #

  # Capture git sha from the repo
  git_sha:
    desc: Extract git sha
    bash:
      cmd: git log -1 --format=%h
      capture: git_sha
      capture_strip: true

  # Generate a version source using the git sha
  semver_git_sha:
    desc: Create git sha based semver version
    depends_on:
      - git_sha
    vars:
      set:
        semver_source: "0.1.0-rolling+{{ git_sha }}"

  # Set the semver source to the github ref
  semver_github_ref:
    desc: Capture semver information from GITHUB_REF
    vars:
      set:
        semver_source: "{{ env.GITHUB_REF }}"

  # Actual parsing of the version source
  parse_semver:
    semver:
      required: true
      sources:
        - "{{ semver_source }}"
      store: version

  ########
  # Repo mgmt steps
  #

  clean_dist:
    command:
      cmd: rm -rf dist/

  clean_env:
    command:
      cmd: rm -rf env/

  clean:
    depends_on:
      - clean_dist
      - clean_env

  ########
  # Python mgmt steps
  #

  python_env:
    bash:
      cmd: >
        python3 -m venv env &&
        source ./env/bin/activate &&
        python3 -m pip install --upgrade pip &&
        python3 -m pip install --upgrade setuptools build twine ;
        python3 -m pip install -r requirements.txt

  python_build:
    bash:
      cmd: source ./env/bin/activate && python3 -m build
      env:
        # BUILD_VERSION is referenced in setup.py
        BUILD_VERSION: "{{ version.major }}.{{ version.minor }}.{{ version.patch }}"
    depends_on:
      - clean_dist
      - python_env
      - parse_semver

  pypi_release:
    depends_on:
      - python_build
    bash:
      cmd: source ./env/bin/activate && python3 -m twine upload dist/*
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: $SECRET_PYPI_TOKEN

  test:
    bash:
      cmd: dfbar -f src/tests/Dockerfile src

  github_release:
    url:
      method: POST
      url: "xx"
      body: |
        {
          "tag_name": "$SEMVER_FULL",
          "name": "Version $SEMVER_FULL",
          "draft": false,
          "prerelease": $SEMVER_IS_PRERELEASE_WORD,
          "generate_release_notes": true
        }

actions:
  clean:
    steps:
      - clean

  test:
    steps:
      - test

  # Standard build
  build:
    steps:
      - semver_git_sha
      - python_build

  # Steps for a pull request to the main branch
  pr_branch_main:
    steps:
      - semver_git_sha
      - python_build
      - test

  # Steps to perform when building on main branch
  push_branch_main:
    steps:
      - semver_git_sha
      - python_build
      - test

  # Steps to perform when building from a git tag v*
  push_tag_v:
    env:
      # Take the semver version from GITHUB_REF by default
      SEMVER_SOURCE: $GITHUB_REF
    steps:
      - python_build
      - pypi_release
      - name: github_release
        type: github_release
        owner: $GITHUB_OWNER
        repo: $GITHUB_REPO
        token: $GITHUB_TOKEN
        payload: |
          {
            "tag_name": "$SEMVER_FULL",
            "name": "Version $SEMVER_FULL",
            "draft": false,
            "prerelease": $SEMVER_IS_PRERELEASE_WORD,
            "generate_release_notes": true
          }
        env:
          GITHUB_TOKEN: $SECRET_GITHUB_TOKEN

